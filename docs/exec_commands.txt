# building docker image
docker build -t curw-wrfv4:ubuntu1604 .
docker build -t curw-wrfv4:wrf_4.1.2_A .
docker build -t curw-wrfv4:wrf_4.1.2_C .
docker build -t curw-wrfv4:wrf_4.1.2_E .
docker build -t curw-wrfv4:wrf_4.1.2_SE .

# build docker image without using cache
docker build --no-cache -t curw-wrfv4:ubuntu1604 .
docker build --no-cache -t curw-wrfv4:wrf_4.1.2_A .

docker build --no-cache -t curw-wrf-18_04:wrf_4.1.2_A .

docker build --no-cache -t curw-wrf-18_04:wrf_4.1.2 .

docker build -t curw-wrf-18_04:wrf_4.1.2 .

# Run already built docker image and connect to its shell
docker run -it curw-wrfv4:wrf_4.1.2_A /bin/bash
docker run -it curw-wrfv4:wrf_4.1.2_C /bin/bash
docker run -it curw-wrfv4:wrf_4.1.2_E /bin/bash
docker run -it curw-wrfv4:wrf_4.1.2_SE /bin/bash

docker run -it curw-wrf-18_04:wrf_4.1.2_A /bin/bash

# view <none><none> docker images
docker images -f dangling=true -q

# remove <none><none> docker images
docker rmi -f $(docker images -f dangling=true -q --no-trunc)

# wrfv4 run inside docker image
docker run -i --rm --privileged
-v /mnt/disks/workspace1/wrf-data/geog:/home/Build_WRF/geog
-v /home/uwcc-admin/uwcc-admin.json:/wrf/gcs.json
curw-wrfv4
/home/Build_WRF/code/wrfv4_run.sh
    -d "2019-08-11_18:00"
    -k "wrfv4_2019-08-11_18_00"
-v curwsl_nfs_1:/home/Build_WRF/nfs
-v curwsl_archive_1:/home/Build_WRF/archive

# processor core count
cat /proc/cpuinfo | awk '/^processor/{print $3}' | wc -l
or
grep -c ^processor /proc/cpuinfo
which will count the number of lines starting with "processor" in /proc/cpuinfo
For systems with hyper-threading, you can use
grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}'

# run wrf in cloud docker vm.
nohup ./runner.sh -r 0 -m E -v 4.0 -h 18 &

nohup ./rfielder.sh -r 0 -m E -v 4.0 -h 18 &

[email]
email_backend = airflow.utils.email.send_email_smtp


[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = smtp.gmail.com
smtp_starttls = True
smtp_ssl = False
# Uncomment and set the user/pass settings if you want to use SMTP AUTH
smtp_user = curwalerts@gmail.com
smtp_password = curwalerts@data
smtp_port = 587
smtp_mail_from = curwalerts@gmail.com


"ssh -i /home/uwcc-admin/.ssh/uwcc-admin -o \"StrictHostKeyChecking no\" uwcc-admin@10.138.0.9 " \
"\'bash -c \"/home/uwcc-admin/jaxa/create_jaxa_rfield.sh\"'"

# remove docker image
docker rmi curw-wrfv4:wrf_4.1_A

# killing all airflow related process
pkill -f airflow

# build docker containers for local deployments
docker build -t curw-wrf-18_04:wrf_4.1.2 .
docker build --no-cache -t curw-wrf-18_04:wrf_4.1.2 .

# Run already built docker image and connect to its shell
docker run -it curw-wrf-18_04:wrf_4.1.2 /bin/bash

airflow email configurations
[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = smtp.gmail.com
smtp_starttls = True
smtp_ssl = False
# Uncomment and set the user/pass settings if you want to use SMTP AUTH
smtp_user = curwalerts@gmail.com
smtp_password = curwalerts@data
smtp_port = 587
smtp_mail_from = curwalerts@gmail.com

ssh curw@124.43.13.195 -p 6022

scp -P 6022 ./Dockerfile curw@124.43.13.195:/home/curw/hechms/Dockerfile

scp -P 6022 ./runner.sh curw@124.43.13.195:/home/curw/hechms/runner.sh

docker build -t curw-hechms-16_04:hechms_4.2.1 .

docker build -t curw-hechms-centos7:hechms_4.2.1 .
docker run -it curw-hechms-centos7:hechms_4.2.1  /bin/bash

docker build --no-cache -t curw-hechms-centos7:hechms_4.2.1 .

curl -X GET "http://172.17.0.2:5000/HECHMS/distributed/init/2020-03-22_10:00:00/3/2/0/MME"
curl -X GET "http://172.17.0.2:5000/HECHMS/distributed/pre-process/2020-03-22_10:00:00/3/2"
curl -X GET "http://172.17.0.2:5000/HECHMS/distributed/run"
curl -X GET "http://172.17.0.2:5000/HECHMS/distributed/post-process/2020-03-22_10:00:00/3/2"

./runner.sh -d 2020-03-22 14:00:00 -f 3 -b 2 -r 0 -p MME

./runner.sh -d 2020-03-22_14:00:00 -f 3 -b 2 -r 0 -p MME -D 2020-03-22 -T 14-00-00

ALTER TABLE dss.rule_logics CHANGE `trigger` `trigger_unit` VARCHAR(500);

20:17:49	Apply changes to rule_logics	Error 2013: Lost connection to MySQL server during query SQL Statement: ALTER TABLE `dss`.`rule_logics`  ADD COLUMN `flow_type` INT NULL AFTER `name`

scp -i  ~/.ssh/uwcc-admin uwcc-admin@35.197.114.151:/home/uwcc-admin/distributed_hec/distributed_model/basinStates.tar.gz  basinStates.tar.gz

I have addedÂ Expected Date of Completion as 2020/07/30

docker build --no-cache -t curw-hechms-v2-centos7:hechms_4.2.1 .

docker build -t curw-hechms-v2-centos7:hechms_4.2.1 .

docker build -t curw-hechms-v2-centos7:hechms_4.2.1 .

docker run -it curw-hechms-v2-centos7:hechms_4.2.1  /bin/bash

https://www.youtube.com/watch?v=6pdtPxsIt_A&list=PLgwlM6VPdy_ZYS-QMwakk9D02XBUyY8Wy&index=16

/home/curw/git/DSS-Framework/docker/hechms/runner.sh  -d 2020-05-19_10:00:00 -f 2 -b 3 -r 1 -p MME -D 2020-05-19 -T 10-00-00 -u fcst_pusher -x aquafcst -y 35.227.163.211 -z curw_sim -m hechms_event -n production

scp -P 6022 curw@124.43.13.195:/mnt/disks/data/hechms/production/2020-05-20/08-00-00.tar.gz ./08-00-00.tar.gz

/home/curw/git/distributed_hechms/output/DailyRain.csv

# run initial conditions from database
 /home/curw/git/DSS-Framework/docker/hechms/runner.sh  -d 2020-05-21_04:00:00 -f 2 -b 3 -r 0 -p MME -D 2020-05-21 -T 04-00-00 -u fcst_pusher -x aquafcst -y 35.227.163.211 -z curw_sim -m hechms_event -n production

curl -X GET "http://192.168.1.41:8088/extract-water-level?run_date=2020-05-25&run_time=10:00:00&model=flo2d_250&forward=2&backward=3&sim_tag=event_run&run_type=production"

curl -X GET "http://192.168.1.41:8088/create-ascii?run_date=2020-05-25&run_time=10:00:00&model=flo2d_250&forward=2&backward=3&run_type=production"

{"CHANNEL_CELL_MAP":
{"115": "South lock pumping station downstream",
"179": "Wellawatta Canal-St Peters College",
"203": "South lock pumping station upstream",
"220": "Dehiwala Canal",
"261": "Mutwal Outfall",
"387": "Swarna Rd-Wellawatta",
"388": "Thummodara",
"475": "Babapulle",
"545": "Ingurukade Jn",
"558": "Mattakkuliya Bridge 2",
"592": "Torrinton",
"604": "Serpentine canal",
"616": "Nagalagam Street",
"618": "Nagalagam Street River",
"660": "OUSL-Narahenpita Rd",
"684": "Dematagoda Canal-Orugodawatta",
"813": "Kirimandala Mw",
"823": "LesliRanagala Mw",
"885": "OUSL-Nawala Kirulapana Canal",
"912": "Kittampahuwa",
"973": "Near SLLRDC",
"991": "Kalupalama",
"1062": "Yakbedda",
"1075": "Kalupalama - Upstream",
"1076": "Kalupalama - Downstream",
"1161": "Kittampahuwa River",
"1243": "Vivekarama Mw",
"1333": "Wellampitiya",
"1420": "Madinnagoda",
"1425": "Harwad Band",
"1517": "Kotte North Canal",
"1625": "Kotiyagoda",
"1731": "Diyatha bridge",
"1732": "JanakalaKendraya",
"1959": "Koratuwa Rd",
"2174": "Weliwala - Kolonnawa",
"2371": "JanakalaKendrayaOld",
"2395": "Kelani Mulla Outfall",
"2396": "Salalihini-River",
"2597": "Old Awissawella Rd",
"2693": "Talatel Culvert",
"2695": "Wennawatta",
"3490": "Ambatale Road Bridge",
"3580": "Ambatale Outfull1",
"3673": "Ambatale River",
"3919": "Amaragoda",
"4192": "Malabe",
"4550": "Kaduwela highway entrance",
"4923": "Kaduwela Bridge",
"5228": "Low level road bridge - kaduwela",
"6159": "Nawagamuwa",
"6325": "Malwana",
"7299": "Embulgamuwa",
"7769": "Low level Rd bridge - Artigala",
"7771": "Welgama"},
"FLOOD_PLAIN_CELL_MAP":
{"24": "Baira Lake Nawam Mw",
"153": "Baira Lake Railway",
"1838": "Polduwa-Parliament Rd",
"1842": "Abagaha Jn",
"2669": "Parliament Lake Side",
"2686": "Aggona",
"2866": "Kibulawala 1",
"2874": "Rampalawatta"}}

((location_name='Yakbedda') and (variable_type='WaterLevel') and ((current_water_level>=alert_water_level) or (current_water_level>=warning_water_level))) or
((location_name='Kohuwala') and (variable_type='Precipitation') and ((rainfall_intensity>=65.4) or ((last_1_day_rainfall>=150) and (last_3_day_rainfall>=420))))

Windows 3 (user & pwd)
curw - )b|M$akD<H8c1!k
----------------------

-------flo2d 150m--------------------------------------------------------------------------------------------------------
run_input_file_generation_methods|command:  .\gen_150_inflow.py -s "2020-05-23 00:00:00" -e "2020-05-31 00:00:00" -d "D:
\flo2d_output\flo2d_150\2020-05-28\05-00-00" -M "SF"

create-outflow|command :  .\gen_outflow.py -m "flo2d_150" -s "2020-05-23 00:00:00" -e "2020-05-31 00:00:00" -d "D:\flo2d
_output\flo2d_150\2020-05-28\05-00-00" -M "MGF"

run_input_file_generation_methods|command:  .\gen_chan.py -m "flo2d_150" -s "2020-05-23 00:00:00" -d "D:\flo2d_output\fl
o2d_150\2020-05-28\05-00-00"

run_input_file_generation_methods|command:  .\gen_raincell.py -m "flo2d_150" -s "2020-05-23 00:00:00" -e "2020-05-31 00:
00:00" -d "D:\flo2d_output\flo2d_150\2020-05-28\05-00-00" -M "MME"

run_input_file_generation_methods|command:  .\extract_water_level.py -m "flo2d_150" -s "2020-05-23 00:00:00" -r "2020-05
-28 05:00:00" -d "D:\flo2d_output\flo2d_150\2020-05-28\05-00-00" -t "hourly_run"

run_input_file_generation_methods|command:  .\extract_discharge.py -m "flo2d_150" -s "2020-05-23 00:00:00" -r "2020-05-2
8 05:00:00" -d "D:\flo2d_output\flo2d_150\2020-05-28\05-00-00" -t "hourly_run"

-------flo2d 250m--------------------------------------------------------------------------------------------------------

docker build -t curw-flo2d-v1:flo2d .

curl -X GET "http://10.138.0.18:8080/start-flo2d-server?host=10.138.0.18&port=8091"

curl -X GET "http://10.138.0.18:8080/start-flo2d-server?host=10.138.0.18&port=8091"

curl -X GET "http://10.138.0.18:8091/test-server-status"

curl -X GET "http://10.138.0.18:8091/shutdown-server"



